// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Service.ClientProfileRule.Client.AutorestClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ClientProfileRuleAPI.
    /// </summary>
    public static partial class ClientProfileRuleAPIExtensions
    {
            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object IsAlive(this IClientProfileRuleAPI operations)
            {
                return operations.IsAliveAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Checks service is alive
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsAliveAsync(this IClientProfileRuleAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsAliveWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<RegulationRuleModel> RegulationRuleGetAll(this IClientProfileRuleAPI operations)
            {
                return operations.RegulationRuleGetAllAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<RegulationRuleModel>> RegulationRuleGetAllAsync(this IClientProfileRuleAPI operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationRuleGetAllWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static RegulationRuleModel RegulationRuleAdd(this IClientProfileRuleAPI operations, RegulationRuleModel model = default(RegulationRuleModel))
            {
                return operations.RegulationRuleAddAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegulationRuleModel> RegulationRuleAddAsync(this IClientProfileRuleAPI operations, RegulationRuleModel model = default(RegulationRuleModel), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationRuleAddWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// </param>
            public static RegulationRuleModel RegulationRuleGetByRegulationId(this IClientProfileRuleAPI operations, string regulationId)
            {
                return operations.RegulationRuleGetByRegulationIdAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegulationRuleModel> RegulationRuleGetByRegulationIdAsync(this IClientProfileRuleAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationRuleGetByRegulationIdWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// </param>
            public static RegulationRuleModel RegulationRuleDelete(this IClientProfileRuleAPI operations, string regulationId)
            {
                return operations.RegulationRuleDeleteAsync(regulationId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='regulationId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RegulationRuleModel> RegulationRuleDeleteAsync(this IClientProfileRuleAPI operations, string regulationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegulationRuleDeleteWithHttpMessagesAsync(regulationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
